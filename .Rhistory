mutate(Filter = wA + wI + wO + wR + wH) %>%
filter(Filter == 1) %>%
mutate(port_key = row_number()) %>%
select(port_key, wA:wH) %>%
as_tibble() %>%
mutate(Portfolio = main_portfolios(wA, wI, wO, wR, wH))
# Read data
output_3put <- read_csv("../Output/Model Output/pvalues_put.csv")
n <- nrow(main_cport)
fa <- output_3put %>%
mutate(Fail = basis_pval > 0.05) %>%
group_by(Expiration) %>%
summarise(Failed = sum(Fail)) %>%
right_join(
ncf_df %>%
select(Date, NPI = All) %>%
filter(Date >= as.Date("2000-12-31")),
by = c("Expiration" = "Date")
) %>%
mutate(Failed = replace_na(Failed, 0)) %>%
arrange(Expiration)
fa_scale <- 1 / 8700
ggplot(mapping = aes(x = Expiration)) +
geom_hline(
yintercept = 0,
colour = "grey"
) +
geom_col(
data = fa %>%
select(Expiration, Failed),
mapping = aes(y = Failed),
fill = "grey"
) +
geom_line(
data = fa %>%
select(Expiration, NPI) %>%
mutate(NPI = NPI / fa_scale),
mapping = aes(y = NPI),
colour = "black",
linetype = "dashed"
) +
geom_point(
data = fa %>%
select(Expiration, NPI) %>%
mutate(NPI = NPI / fa_scale),
mapping = aes(y = NPI),
colour = "black"
) +
scale_y_continuous(
sec.axis = sec_axis(
~. * fa_scale,
labels = scales::percent,
name = "NPI Quarterly Returns"
)
) + labs(
y = "Number of Failed Hedges",
x = "Expiration Date",
colour = "Parameter"
) +
theme_bw()
source("Model/Scripts/model_process.R")
# 1. Source empirical data ------------------------------------------------
# NCREIF Index
ncf_source <- "Model/Source/SourceFiles/NCREIF/NPI Returns 3-9-21.xlsx"
ncf_df <- map_dfr(c("NPI - National", "NPI - Property Type"),
function(x) {
read_xlsx(path = ncf_source, sheet = x)
}) %>%
transmute(
Date = yq(str_c(Year, "0", Quarter)) %m+% months(3) %m+% days(-1),
PropertyType = factor(replace_na(PropertyType, "All"), levels = c("All", "A", "H", "I", "O", "R")),
y = `Income Return`,
g = `Capital Return`,
r = `Total Return`
) %>%
select(Date, PropertyType, g) %>%
pivot_wider(names_from = PropertyType, values_from = g) %>%
drop_na() %>%
left_join(
read_excel(ncf_source, sheet = "NPI - National") %>%
transmute(Date = yq(str_c(Year, "0", Quarter)) %m+% months(3) %m+% days(-1), Index),
by = c("Date")
)
# Risk free rates
ncf_rf <- read_csv("Model/Source/SourceFiles/NCREIF/TB3MS.csv") %>%
transmute(Date = DATE %m+% days(-1), rf = TB3MS / 100) %>%
mutate(Month = month(Date)) %>%
filter(Month %in% c(3, 6, 9, 12)) %>%
filter(Date >= min(ncf_df$Date)) %>%
select(Date, rf)
payoff_put <- function(Spot, Strike) return(max(Strike - Spot, 0))
payoff <- payoff_put
years <- 1995:2000
expand.grid(
Year = years,
Quarter = 1:4,
QTM = seq(12, 0, -1)
) %>%
arrange(
Year,
Quarter,
desc(QTM)
)
expand.grid(
Year = years,
Quarter = 1:4,
QTM = seq(12, 0, -1)
) %>%
arrange(
Year,
Quarter,
desc(QTM)
) %>%
mutate(
Expiration = as.Date(str_c(Year, "-", Quarter * 3 , "-1")) %m+%
months(1) %m+% days(-1),
Valuation = Expiration %m+%
days(1) %m+% months(-(QTM * 3)) %m+% days(-1)
)
expand.grid(
Year = years,
Quarter = 1:4,
QTM = seq(12, 0, -1)
) %>%
arrange(
Year,
Quarter,
desc(QTM)
) %>%
mutate(
Expiration = as.Date(str_c(Year, "-", Quarter * 3 , "-1")) %m+%
months(1) %m+% days(-1),
Valuation = Expiration %m+%
days(1) %m+% months(-(QTM * 3)) %m+% days(-1)
) %>%
left_join(
select(ncf_df, Date, Index),
by = c("Valuation" = "Date")
)
# Generate grid for valuation inputs
emp_prices <- expand.grid(
Year = years,
Quarter = 1:4,
QTM = seq(12, 0, -1)
) %>%
arrange(
Year,
Quarter,
desc(QTM)
) %>%
mutate(
Expiration = as.Date(str_c(Year, "-", Quarter * 3 , "-1")) %m+%
months(1) %m+% days(-1),
Valuation = Expiration %m+%
days(1) %m+% months(-(QTM * 3)) %m+% days(-1)
) %>%
left_join(
select(ncf_df, Date, Index),
by = c("Valuation" = "Date")
) %>%
mutate(
Strike = as.integer(!((QTM + 1) %% 13 > 0)) * Index, # ATM
Strike = map_dbl(Strike, function(x) ifelse(x == 0, NA, x))
) %>%
fill(Strike)
emp_prices
View(emp_prices)
years <- 1995:2020.
years <- 1995:2020
# Generate grid for valuation inputs
emp_prices <- expand.grid(
Year = years,
Quarter = 1:4,
QTM = seq(12, 0, -1)
) %>%
arrange(
Year,
Quarter,
desc(QTM)
) %>%
mutate(
Expiration = as.Date(str_c(Year, "-", Quarter * 3 , "-1")) %m+%
months(1) %m+% days(-1),
Valuation = Expiration %m+%
days(1) %m+% months(-(QTM * 3)) %m+% days(-1)
) %>%
left_join(
select(ncf_df, Date, Index),
by = c("Valuation" = "Date")
) %>%
mutate(
Strike = as.integer(!((QTM + 1) %% 13 > 0)) * Index, # ATM
Strike = map_dbl(Strike, function(x) ifelse(x == 0, NA, x))
) %>%
fill(Strike)
View(emp_prices)
ncf_ds
ncf_df
ncf_df %>% ggplot(aes(x = Date, y = Index)) + geom_line()
# Read data
output_3put <- read_csv("../Output/Model Output/pvalues_put.csv")
n <- nrow(main_cport)
ncf_source <- "../Source/SourceFiles/NCREIF/NPI Returns 3-9-21.xlsx"
ncf_df <- map_dfr(c("NPI - National", "NPI - Property Type"),
function(x) {
read_xlsx(path = ncf_source, sheet = x)
}) %>%
transmute(
Date = yq(str_c(Year, "0", Quarter)) %m+% months(3) %m+% days(-1),
PropertyType = factor(replace_na(PropertyType, "All"), levels = c("All", "A", "H", "I", "O", "R")),
y = `Income Return`,
g = `Capital Return`,
r = `Total Return`
) %>%
select(Date, PropertyType, g) %>%
pivot_wider(names_from = PropertyType, values_from = g) %>%
drop_na() %>%
left_join(
read_excel(ncf_source, sheet = "NPI - National") %>%
transmute(Date = yq(str_c(Year, "0", Quarter)) %m+% months(3) %m+% days(-1), Index),
by = c("Date")
)
# Risk free rates
ncf_rf <- read_csv("../Source/SourceFiles/NCREIF/TB3MS.csv") %>%
transmute(Date = DATE %m+% days(-1), rf = TB3MS / 100) %>%
mutate(Month = month(Date)) %>%
filter(Month %in% c(3, 6, 9, 12)) %>%
filter(Date >= min(ncf_df$Date)) %>%
select(Date, rf)
# Function that use a grid of weights and determine the portfolios returns
main_portfolios <- function(wA, wI, wO, wR, wH) {
# Calculation portfolio-wise
n <- length(wA)
v <- vector("list", n)
for (k in 1:n) {
v[[k]] <- ncf_df %>%
mutate(rp = A * wA[k] + I * wI[k] + O * wO[k] + R * wR[k] + H * wH[k]) %>%
select(Date, rp)
}
# Results
return(v)
}
# Grid of all possible portfolios (No short selling, only real estate)
main_cport <- expand.grid(
wA = seq(0, 1, 0.10),
wI = seq(0, 1, 0.10),
wO = seq(0, 1, 0.10),
wR = seq(0, 1, 0.10),
wH = seq(0, 1, 0.10)
) %>%
mutate(Filter = wA + wI + wO + wR + wH) %>%
filter(Filter == 1) %>%
mutate(port_key = row_number()) %>%
select(port_key, wA:wH) %>%
as_tibble() %>%
mutate(Portfolio = main_portfolios(wA, wI, wO, wR, wH))
n <- nrow(main_cport)
fa <- output_3put %>%
mutate(Fail = basis_pval > 0.05) %>%
group_by(Expiration) %>%
summarise(Failed = sum(Fail)) %>%
right_join(
ncf_df %>%
select(Date, NPI = All) %>%
filter(Date >= as.Date("2000-12-31")),
by = c("Expiration" = "Date")
) %>%
mutate(Failed = replace_na(Failed, 0)) %>%
arrange(Expiration)
fa_scale <- 1 / 8700
ggplot(mapping = aes(x = Expiration)) +
geom_hline(
yintercept = 0,
colour = "grey"
) +
geom_col(
data = fa %>%
select(Expiration, Failed),
mapping = aes(y = Failed),
fill = "grey"
) +
geom_line(
data = fa %>%
select(Expiration, NPI) %>%
mutate(NPI = NPI / fa_scale),
mapping = aes(y = NPI),
colour = "black",
linetype = "dashed"
) +
geom_point(
data = fa %>%
select(Expiration, NPI) %>%
mutate(NPI = NPI / fa_scale),
mapping = aes(y = NPI),
colour = "black"
) +
scale_y_continuous(
sec.axis = sec_axis(
~. * fa_scale,
labels = scales::percent,
name = "NPI Quarterly Returns"
)
) + labs(
y = "Number of Failed Hedges",
x = "Expiration Date",
colour = "Parameter"
) +
theme_bw()
# Main run of the empirical study
source("Model/Scripts/model_process.R")
# 1. Source empirical data ------------------------------------------------
# NCREIF Index
ncf_source <- "Model/Source/SourceFiles/NCREIF/NPI Returns 3-9-21.xlsx"
ncf_df <- map_dfr(c("NPI - National", "NPI - Property Type"),
function(x) {
read_xlsx(path = ncf_source, sheet = x)
}) %>%
transmute(
Date = yq(str_c(Year, "0", Quarter)) %m+% months(3) %m+% days(-1),
PropertyType = factor(replace_na(PropertyType, "All"), levels = c("All", "A", "H", "I", "O", "R")),
y = `Income Return`,
g = `Capital Return`,
r = `Total Return`
) %>%
select(Date, PropertyType, g) %>%
pivot_wider(names_from = PropertyType, values_from = g) %>%
drop_na() %>%
left_join(
read_excel(ncf_source, sheet = "NPI - National") %>%
transmute(Date = yq(str_c(Year, "0", Quarter)) %m+% months(3) %m+% days(-1), Index),
by = c("Date")
)
# Risk free rates
ncf_rf <- read_csv("Model/Source/SourceFiles/NCREIF/TB3MS.csv") %>%
transmute(Date = DATE %m+% days(-1), rf = TB3MS / 100) %>%
mutate(Month = month(Date)) %>%
filter(Month %in% c(3, 6, 9, 12)) %>%
filter(Date >= min(ncf_df$Date)) %>%
select(Date, rf)
# Define derivatives payoff -----------------------------------------------
payoff_put <- function(Spot, Strike) return(max(Strike - Spot, 0))
payoff <- payoff_put()
payoff <- payoff_put
itm <- 0
years = 1995:2020
expand.grid(
Year = years,
Quarter = 1:4,
QTM = seq(12, 0, -1)
) %>%
arrange(
Year,
Quarter,
desc(QTM)
) %>%
mutate(
Expiration = as.Date(str_c(Year, "-", Quarter * 3 , "-1")) %m+%
months(1) %m+% days(-1),
Valuation = Expiration %m+%
days(1) %m+% months(-(QTM * 3)) %m+% days(-1)
) %>%
left_join(
select(ncf_df, Date, Index),
by = c("Valuation" = "Date")
) %>%
mutate(
Strike = as.integer(!((QTM + 1) %% 13 > 0)) * Index * (1 + itm / 100), # ATM vs ITM
Strike = map_dbl(Strike, function(x) ifelse(x == 0, NA, x))
) %>%
fill(Strike)
# Generate grid for valuation inputs
emp_prices <- expand.grid(
Year = years,
Quarter = 1:4,
QTM = seq(12, 0, -1)
) %>%
arrange(
Year,
Quarter,
desc(QTM)
) %>%
mutate(
Expiration = as.Date(str_c(Year, "-", Quarter * 3 , "-1")) %m+%
months(1) %m+% days(-1),
Valuation = Expiration %m+%
days(1) %m+% months(-(QTM * 3)) %m+% days(-1)
) %>%
left_join(
select(ncf_df, Date, Index),
by = c("Valuation" = "Date")
) %>%
mutate(
Strike = as.integer(!((QTM + 1) %% 13 > 0)) * Index * (1 + itm / 100), # ATM vs ITM
Strike = map_dbl(Strike, function(x) ifelse(x == 0, NA, x))
) %>%
fill(Strike)
emp_prices[1:10, ] %>%
mutate(
Price = pmap_dbl(
list(Index, Strike, QTM, Valuation, Expiration),
function(S, K, m, d1, d2) {
if (m > 0) {
at <- filter(ncf_df, Date <= d1)[["Index"]]
rat <- 4 * filter(ncf_df, Date <= d1)[["All"]]
rf <- filter(ncf_rf, Date <= d1)[["rf"]]
val <- dvt_price(at, rat, rf, function(x) payoff(x, K), pte = m)
} else {
val <- payoff_put(S, K)
}
cat(
"Expiration at: ", d2,
". Valuation at:", d1,
". Strike: ", K,
". Spot: ", S,
". QTM: ", m,
". Price: ", val,
".\n"
)
return(val)
}
)
)
source("Model/Scripts/model_pricing.R")
emp_prices[1:10, ] %>%
mutate(
Price = pmap_dbl(
list(Index, Strike, QTM, Valuation, Expiration),
function(S, K, m, d1, d2) {
if (m > 0) {
at <- filter(ncf_df, Date <= d1)[["Index"]]
rat <- 4 * filter(ncf_df, Date <= d1)[["All"]]
rf <- filter(ncf_rf, Date <= d1)[["rf"]]
val <- dvt_price(at, rat, rf, function(x) payoff(x, K), pte = m)
} else {
val <- payoff_put(S, K)
}
cat(
"Expiration at: ", d2,
". Valuation at:", d1,
". Strike: ", K,
". Spot: ", S,
". QTM: ", m,
". Price: ", val,
".\n"
)
return(val)
}
)
)
# Main run of the empirical study
source("Model/Scripts/model_process.R")
# 1. Source empirical data ------------------------------------------------
# NCREIF Index
ncf_source <- "Model/Source/SourceFiles/NCREIF/NPI Returns 3-9-21.xlsx"
ncf_df <- map_dfr(c("NPI - National", "NPI - Property Type"),
function(x) {
read_xlsx(path = ncf_source, sheet = x)
}) %>%
transmute(
Date = yq(str_c(Year, "0", Quarter)) %m+% months(3) %m+% days(-1),
PropertyType = factor(replace_na(PropertyType, "All"), levels = c("All", "A", "H", "I", "O", "R")),
y = `Income Return`,
g = `Capital Return`,
r = `Total Return`
) %>%
select(Date, PropertyType, g) %>%
pivot_wider(names_from = PropertyType, values_from = g) %>%
drop_na() %>%
left_join(
read_excel(ncf_source, sheet = "NPI - National") %>%
transmute(Date = yq(str_c(Year, "0", Quarter)) %m+% months(3) %m+% days(-1), Index),
by = c("Date")
)
# Risk free rates
ncf_rf <- read_csv("Model/Source/SourceFiles/NCREIF/TB3MS.csv") %>%
transmute(Date = DATE %m+% days(-1), rf = TB3MS / 100) %>%
mutate(Month = month(Date)) %>%
filter(Month %in% c(3, 6, 9, 12)) %>%
filter(Date >= min(ncf_df$Date)) %>%
select(Date, rf)
# Define derivatives payoff -----------------------------------------------
payoff_put <- function(Spot, Strike) return(max(Strike - Spot, 0))
main_prices(ncf_df, ncf_rf, payoff_put, "prices_put_atm", itm = 0, years = 1995:2020)
main_prices(ncf_df, ncf_rf, payoff_put, "prices_put_itm1", itm = 1, years = 1995:2020)
main_prices(ncf_df, ncf_rf, payoff_put, "prices_put_itm2", itm = 2, years = 1995:2020)
source("Model/Scripts/model_process.R")
expand.grid(1:5, 6:10)
expand.grid(
wA = seq(0, 1, 0.10),
wI = seq(0, 1, 0.10),
wO = seq(0, 1, 0.10),
wR = seq(0, 1, 0.10),
wH = seq(0, 1, 0.10)
)
expand.grid(
wA = seq(0, 1, 0.10),
wI = seq(0, 1, 0.10),
wO = seq(0, 1, 0.10),
wR = seq(0, 1, 0.10),
wH = seq(0, 1, 0.10)
) %>%
mutate(Filter = wA + wI + wO + wR + wH)
expand.grid(
wA = seq(0, 1, 0.10),
wI = seq(0, 1, 0.10),
wO = seq(0, 1, 0.10),
wR = seq(0, 1, 0.10),
wH = seq(0, 1, 0.10)
) %>%
mutate(Filter = wA + wI + wO + wR + wH) %>%
filter(Filter == 1)
library(tidyverse)
